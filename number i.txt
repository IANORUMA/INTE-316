i)
   i) import numpy as np

def lagrange_interpolation(x, y, x_val):
    n = len(x)
    result = 0
    for i in range(n):
        term = y[i]
        for j in range(n):
            if j != i:
                term = term * (x_val - x[j]) / (x[i] - x[j])
        result += term
    return result


x = np.array([1, 2, 3, 4])
y = np.array([1, 4, 9, 16])


x_vals = np.linspace(1, 4, 100)
y_vals = [lagrange_interpolation(x, y, xv) for xv in x_vals]


import matplotlib.pyplot as plt

plt.plot(x, y, 'o', label='Data points')
plt.plot(x_vals, y_vals, '-', label='Lagrange Interpolation')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.title('Lagrange Polynomial Interpolation')
plt.show()


ii) def divided_diff(x, y):
    n = len(y)
    coef = np.zeros([n, n])
    coef[:, 0] = y
    
    for j in range(1, n):
        for i in range(n - j):
            coef[i, j] = (coef[i + 1, j - 1] - coef[i, j - 1]) / (x[i + j] - x[i])
    
    return coef[0, :]

def newton_poly(coef, x_data, x):
    n = len(coef) - 1
    p = coef[n]
    for k in range(1, n + 1):
        p = coef[n - k] + (x - x_data[n - k]) * p
    return p


x = np.array([1, 2, 3, 4])
y = np.array([1, 4, 9, 16])


coef = divided_diff(x, y)

# Evaluate at several points
x_vals = np.linspace(1, 4, 100)
y_vals = [newton_poly(coef, x, xv) for xv in x_vals]


plt.plot(x, y, 'o', label='Data points')
plt.plot(x_vals, y_vals, '-', label='Newton Interpolation')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.title('Newton Polynomial Interpolation')
plt.show()

iii)
Lagrange Technique:

Builds the polynomial directly from the supplied points.
For a large number of points, the polynomial can become rather complex and computationally demanding.
Not as effective when adding additional data points because it requires recalculating the polynomial in its entirety.
Newtonâ€™s Divided Difference Method:
Is more effective when building the polynomial sequentially for a greater number of points.
added data points are easier to add without having to recalculate the entire polynomial.
employs a recursive method, which has the potential to be more computer-efficient.
Comparison:
For short datasets, the outcomes from both approaches are the same.
Newton's approach is usually favoured for large datasets because of its flexibility and efficiency in adding new points.
